<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="17.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredToolArchitecture>x64</PreferredToolArchitecture>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{DC73BBEC-7737-3723-8D13-6E6DCEFFC5F1}</ProjectGuid>
    <WindowsTargetPlatformVersion>10.0.22000.0</WindowsTargetPlatformVersion>
    <Keyword>Win32Proj</Keyword>
    <Platform>x64</Platform>
    <ProjectName>capstone-static</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
    <VcpkgEnabled>false</VcpkgEnabled>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="do_not_import_user.props" Condition="exists('do_not_import_user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">capstone-static.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">capstone</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">capstone-static.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">capstone</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">capstone-static.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">capstone</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">capstone-static.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">capstone</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.lib</TargetExt>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_Debug;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <DisableSpecificWarnings>4244</DisableSpecificWarnings>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;WINVER=0x0501;CAPSTONE_USE_SYS_DYN_MEM;CAPSTONE_HAS_ARM;CMAKE_INTDIR="Debug"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_DEBUG;_WINDOWS;WINVER=0x0501;CAPSTONE_USE_SYS_DYN_MEM;CAPSTONE_HAS_ARM;CMAKE_INTDIR=\"Debug\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_Debug;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_Debug;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <PreBuildEvent>
      <UseUtf8Encoding>Always</UseUtf8Encoding>
      <Message>Automatic MOC for target capstone-static</Message>
      <Command>setlocal
cd C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone
if %errorlevel% neq 0 goto :cmEnd
C:
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E cmake_autogen C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeFiles/capstone-static_autogen.dir/AutogenInfo.json Debug
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
    </PreBuildEvent>
    <Lib>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_Release;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <DisableSpecificWarnings>4244</DisableSpecificWarnings>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;WINVER=0x0501;CAPSTONE_USE_SYS_DYN_MEM;CAPSTONE_HAS_ARM;CMAKE_INTDIR="Release"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;WINVER=0x0501;CAPSTONE_USE_SYS_DYN_MEM;CAPSTONE_HAS_ARM;CMAKE_INTDIR=\"Release\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_Release;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_Release;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <PreBuildEvent>
      <UseUtf8Encoding>Always</UseUtf8Encoding>
      <Message>Automatic MOC for target capstone-static</Message>
      <Command>setlocal
cd C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone
if %errorlevel% neq 0 goto :cmEnd
C:
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E cmake_autogen C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeFiles/capstone-static_autogen.dir/AutogenInfo.json Release
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
    </PreBuildEvent>
    <Lib>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_MinSizeRel;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <DisableSpecificWarnings>4244</DisableSpecificWarnings>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;WINVER=0x0501;CAPSTONE_USE_SYS_DYN_MEM;CAPSTONE_HAS_ARM;CMAKE_INTDIR="MinSizeRel"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;WINVER=0x0501;CAPSTONE_USE_SYS_DYN_MEM;CAPSTONE_HAS_ARM;CMAKE_INTDIR=\"MinSizeRel\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_MinSizeRel;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_MinSizeRel;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <PreBuildEvent>
      <UseUtf8Encoding>Always</UseUtf8Encoding>
      <Message>Automatic MOC for target capstone-static</Message>
      <Command>setlocal
cd C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone
if %errorlevel% neq 0 goto :cmEnd
C:
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E cmake_autogen C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeFiles/capstone-static_autogen.dir/AutogenInfo.json MinSizeRel
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
    </PreBuildEvent>
    <Lib>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_RelWithDebInfo;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <DisableSpecificWarnings>4244</DisableSpecificWarnings>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;WINVER=0x0501;CAPSTONE_USE_SYS_DYN_MEM;CAPSTONE_HAS_ARM;CMAKE_INTDIR="RelWithDebInfo"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;WINVER=0x0501;CAPSTONE_USE_SYS_DYN_MEM;CAPSTONE_HAS_ARM;CMAKE_INTDIR=\"RelWithDebInfo\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_RelWithDebInfo;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\include_RelWithDebInfo;C:\Users\thedemons\Documents\GitHub\snowman\src;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party;C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include;C:\dev\vcpkg\installed\x64-windows\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <PreBuildEvent>
      <UseUtf8Encoding>Always</UseUtf8Encoding>
      <Message>Automatic MOC for target capstone-static</Message>
      <Command>setlocal
cd C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone
if %errorlevel% neq 0 goto :cmEnd
C:
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E cmake_autogen C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeFiles/capstone-static_autogen.dir/AutogenInfo.json RelWithDebInfo
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
    </PreBuildEvent>
    <Lib>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\CMakeLists.txt">
      <UseUtf8Encoding>Always</UseUtf8Encoding>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Building Custom Rule C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Users/thedemons/Documents/GitHub/snowman/src -BC:/Users/thedemons/Documents/GitHub/snowman/src --check-stamp-file C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Building Custom Rule C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Users/thedemons/Documents/GitHub/snowman/src -BC:/Users/thedemons/Documents/GitHub/snowman/src --check-stamp-file C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Building Custom Rule C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Users/thedemons/Documents/GitHub/snowman/src -BC:/Users/thedemons/Documents/GitHub/snowman/src --check-stamp-file C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Building Custom Rule C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Users/thedemons/Documents/GitHub/snowman/src -BC:/Users/thedemons/Documents/GitHub/snowman/src --check-stamp-file C:/Users/thedemons/Documents/GitHub/snowman/src/3rd-party/capstone/capstone/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\mocs_compilation_Debug.cpp">
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">true</ExcludedFromBuild>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</ExcludedFromBuild>
    </ClCompile>
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\cs.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\MCInst.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\MCInstrDesc.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\MCRegisterInfo.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\SStream.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\utils.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMDisassembler.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMInstPrinter.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMMapping.c" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMModule.c" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\arm64.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\arm.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\capstone.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\mips.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\ppc.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\x86.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\sparc.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\systemz.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\xcore.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\include\platform.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\utils.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\MCRegisterInfo.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\MCInst.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\MCInstrDesc.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\SStream.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\cs_priv.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\myinttypes.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMAddressingModes.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMBaseInfo.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMDisassembler.h" />
    <None Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMGenAsmWriter.inc">
    </None>
    <None Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMGenDisassemblerTables.inc">
    </None>
    <None Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMGenInstrInfo.inc">
    </None>
    <None Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMGenRegisterInfo.inc">
    </None>
    <None Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMGenSubtargetInfo.inc">
    </None>
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMInstPrinter.h" />
    <ClInclude Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\arch\ARM\ARMMapping.h" />
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\mocs_compilation_Release.cpp">
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</ExcludedFromBuild>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">true</ExcludedFromBuild>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</ExcludedFromBuild>
    </ClCompile>
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\mocs_compilation_MinSizeRel.cpp">
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</ExcludedFromBuild>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</ExcludedFromBuild>
    </ClCompile>
    <ClCompile Include="C:\Users\thedemons\Documents\GitHub\snowman\src\3rd-party\capstone\capstone\capstone-static_autogen\mocs_compilation_RelWithDebInfo.cpp">
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</ExcludedFromBuild>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">true</ExcludedFromBuild>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="C:\Users\thedemons\Documents\GitHub\snowman\src\ZERO_CHECK.vcxproj">
      <Project>{3BAAFCF3-3514-3ED3-AAA4-05082D3BC627}</Project>
      <Name>ZERO_CHECK</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>